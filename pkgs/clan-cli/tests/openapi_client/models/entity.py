# coding: utf-8

"""
    FastAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Dict, Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr

class Entity(BaseModel):
    """
    Entity
    """
    did: Optional[StrictStr] = 'did:sov:test:1234'
    name: Optional[StrictStr] = 'C1'
    ip: Optional[StrictStr] = '127.0.0.1'
    visible: Optional[StrictBool] = True
    other: Optional[Dict[str, Any]] = None
    attached: StrictBool = Field(...)
    __properties = ["did", "name", "ip", "visible", "other", "attached"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Entity:
        """Create an instance of Entity from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Entity:
        """Create an instance of Entity from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Entity.parse_obj(obj)

        _obj = Entity.parse_obj({
            "did": obj.get("did") if obj.get("did") is not None else 'did:sov:test:1234',
            "name": obj.get("name") if obj.get("name") is not None else 'C1',
            "ip": obj.get("ip") if obj.get("ip") is not None else '127.0.0.1',
            "visible": obj.get("visible") if obj.get("visible") is not None else True,
            "other": obj.get("other"),
            "attached": obj.get("attached")
        })
        return _obj


