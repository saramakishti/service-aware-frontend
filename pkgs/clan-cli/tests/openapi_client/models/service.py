# coding: utf-8

"""
    FastAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Dict, Optional
from pydantic import BaseModel, StrictStr

class Service(BaseModel):
    """
    Service
    """
    uuid: Optional[StrictStr] = '8e285c0c-4e40-430a-a477-26b3b81e30df'
    service_name: Optional[StrictStr] = 'Carlo's Printing'
    service_type: Optional[StrictStr] = '3D Printing'
    endpoint_url: Optional[StrictStr] = 'http://127.0.0.1:8000'
    status: Optional[StrictStr] = 'unknown'
    other: Optional[Dict[str, Any]] = None
    entity_did: Optional[StrictStr] = 'did:sov:test:1234'
    __properties = ["uuid", "service_name", "service_type", "endpoint_url", "status", "other", "entity_did"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Service:
        """Create an instance of Service from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Service:
        """Create an instance of Service from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Service.parse_obj(obj)

        _obj = Service.parse_obj({
            "uuid": obj.get("uuid") if obj.get("uuid") is not None else '8e285c0c-4e40-430a-a477-26b3b81e30df',
            "service_name": obj.get("service_name") if obj.get("service_name") is not None else 'Carlo's Printing',
            "service_type": obj.get("service_type") if obj.get("service_type") is not None else '3D Printing',
            "endpoint_url": obj.get("endpoint_url") if obj.get("endpoint_url") is not None else 'http://127.0.0.1:8000',
            "status": obj.get("status") if obj.get("status") is not None else 'unknown',
            "other": obj.get("other"),
            "entity_did": obj.get("entity_did") if obj.get("entity_did") is not None else 'did:sov:test:1234'
        })
        return _obj


